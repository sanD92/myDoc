
*************************Reverse a String With Built-In Functions*******************
For this solution, we will use three methods: the String.prototype.split() method,
 the Array.prototype.reverse() method 
 and the Array.prototype.join() method.
 
function reverseString(str) {
    return str.split("").reverse().join("");
}
console.log(reverseString("hello"));

Output:
olleh

*********************************Reverse a String With a Decrementing For Loop*********************************************
function reverseString(str) {
    
    var newString = "";
    console.log("length",str.length - 1);
    for (var i = str.length - 1; i >= 0; i--) { 
        newString += str[i]; // or newString = newString + str[i];
    }
     return newString;
}
console.log(reverseString("hello"));

Output:
olleh

********************************Reverse a String With Recursion****************************************************************
we will use two methods: the String.prototype.substr() method and the String.prototype.charAt() method.
The depth of the recursion is equal to the length of the String.
This solution is not the best one and will be really slow if the String is very long and the stack size is of major concern.
 
function reverseString(str) {
  if (str === "")
    return "";
  else
    return reverseString(str.substr(1)) + str.charAt(0);
}
reverseString("hello");

***********************************************************************

Implementation 1:

function reverse(s) {
  var o = '';
  for (var i = s.length - 1; i >= 0; i--)
    o += s[i];
  return o;
}
************************************************************************
Implementation 2:

function reverse(s) {
  var o = [];
  for (var i = s.length - 1, j = 0; i >= 0; i--, j++)
    o[j] = s[i];
  return o.join('');
}

************************************************************************

Implementation 3:

function reverse(s) {
  var o = [];
  for (var i = 0, len = s.length; i <= len; i++)
    o.push(s.charAt(len - i));
  return o.join('');
}

************************************************************************

Implementation 4:

function reverse(s) {
  return s.split('').reverse().join('');
}

************************************************************************

Implementation 5:

function reverse(s) {
  var i = s.length,
      o = '';
  while (i > 0) {
    o += s.substring(i - 1, i);
    i--;
  }
  return o;
}

************************************************************************

Implementation 6:

function reverse(s) {
  for (var i = s.length - 1, o = ''; i >= 0; o += s[i--]) { }
  return o;
}

************************************************************************

Implementation 7:

function reverse(s) {
  return (s === '') ? '' : reverse(s.substr(1)) + s.charAt(0);
}

************************************************************************

Implementation 8:

function reverse(s) {
  function rev(s, len, o) {
    return (len === 0) ? o : rev(s, --len, (o += s[len]));
  };
  return rev(s, s.length, '');
}

************************************************************************

Implementation 9:

function reverse(s) {
  s = s.split('');
  var len = s.length,
      halfIndex = Math.floor(len / 2) - 1,
      tmp;


     for (var i = 0; i <= halfIndex; i++) {
        tmp = s[len - i - 1];
        s[len - i - 1] = s[i];
        s[i] = tmp;
      }
      return s.join('');
    }
	
************************************************************************

Implementation 10

function reverse(s) {
  if (s.length < 2)
    return s;
  var halfIndex = Math.ceil(s.length / 2);
  return reverse(s.substr(halfIndex)) +
         reverse(s.substr(0, halfIndex));
}

